{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Cardlist","robots","map","robot","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","numText","length","letter_s","CardList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAdF,SAACC,GAAW,IACbC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACI,4BAAKF,GACL,2BAAIC,MCaLK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,GACR,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAMP,GACTA,GAAIO,EAAMP,GACVF,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,aCC9BU,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKT,UAAU,OACX,2BACIA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,G,MARA,SAACjB,GACZ,OACI,yBAAKkB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjErB,EAAMsB,YCkBJC,E,YApBX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,UAAU,GAHL,E,+EAOKC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,qDAEJG,KAAK5B,MAAMsB,a,GAhBEQ,aCkFbC,E,YA5EX,aAAe,IAAD,8BACV,+CAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACThB,OAAQ,GACR0B,YAAa,IAJP,E,iFAQM,IAAD,OACfG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACrB,OAAQiC,S,+BAOpC,IAAD,OACCC,EAAiBd,KAAKJ,MAAMhB,OAAOmC,QAAO,SAAAjC,GAC5C,OAAOA,EAAMT,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAGhEE,EAAU,GACd,OAAOJ,EAAeK,QAClB,KAAK,EAAGD,EAAU,OACd,MACJ,KAAK,EAAGA,EAAU,MACd,MACJ,KAAK,EAAGA,EAAU,MACd,MACJ,KAAK,EAAGA,EAAU,QACd,MACJ,KAAK,EAAGA,EAAU,OACd,MACJ,KAAK,EAAGA,EAAU,OACd,MACJ,KAAK,EAAGA,EAAU,MACd,MACJ,KAAK,EAAGA,EAAU,QACd,MACJ,KAAK,EAAGA,EAAU,QACd,MACJ,KAAK,EAAGA,EAAU,OACd,MACJ,KAAK,GAAIA,EAAU,MACf,MACJ,QAASA,EAAU,GAGvB,IAAIE,EAAW,GACf,OAAOF,GACH,IAAK,MAAOE,EAAW,GACnB,MACJ,QAASA,EAAW,IAGxB,OAAIpB,KAAKJ,MAAMhB,OAAOuC,OAId,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAM0C,EAApB,cAAwCE,GACxC,kBAAC,EAAD,CAAWnC,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACiB,EAAD,CAAUzC,OAAQkC,OAR3B,2C,GA3DDZ,aCKEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.563b0a6b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n    const { name, email, id} = props;\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Card; ","import React from \"react\";\nimport Card from \"./Card\";\n\nconst Cardlist = ({ robots }) => {\n\n    return (\n        <div>\n            {\n                robots.map((robot) => {\n                    return (\n                        <Card key={robot.id} \n                                id={robot.id} \n                                name={robot.name} \n                                email={robot.email} \n                                />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default Cardlist; ","import React from \"react\";\n\nconst Searchbox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type=\"search\" \n                placeholder=\"Search Robots\" \n                onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default Searchbox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: \"scroll\", border: '1px solid black', height: \"600px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component{\n    constructor(){\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Something went wrong.</h1>\n        }\n        return this.props.children\n    }\n\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/Searchbox\";\nimport \"./app.css\"\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: \"\",\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});\n    }\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n\n        let numText = \"\";\n        switch(filteredRobots.length){\n            case 0: numText = \"Zero\";\n                break;\n            case 1: numText = \"One\";\n                break;\n            case 2: numText = \"Two\";\n                break;\n            case 3: numText = \"Three\";\n                break;\n            case 4: numText = \"Four\";\n                break;\n            case 5: numText = \"Five\";\n                break;\n            case 6: numText = \"Six\";\n                break;\n            case 7: numText = \"Seven\";\n                break;\n            case 8: numText = \"Eight\";\n                break;\n            case 9: numText = \"Nine\";\n                break;\n            case 10: numText = \"Ten\"\n                break;\n            default: numText = \"\";\n        }\n\n        let letter_s = \"\";\n        switch(numText){\n            case \"One\": letter_s = \"\";\n                break;\n            default: letter_s = \"s\";\n        }\n\n        if(!this.state.robots.length){\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">{numText} Robofriend{letter_s}</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}